name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

    - name: Lint with ruff
      run: |
        ruff check bots/ libs/ tests/
        ruff format --check bots/ libs/ tests/

    - name: Type check with mypy
      run: |
        mypy bots/ libs/ tests/ || true

    - name: Run unit tests
      run: |
        make test-unit

    - name: Run end-to-end tests
      run: |
        make test-e2e

    - name: Run tests with coverage
      run: |
        make test-cov-xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r bots/ libs/ -f json -o bandit-report.json || true

    - name: Check for security vulnerabilities
      run: |
        safety check || true

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt

    - name: Run performance tests
      run: |
        python -m pytest tests/test_e2e_bots.py::TestPerformanceAndTiming -v

  bot-specific-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bot: [jit, hedge, trend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pip install -r requirements-dev.txt

    - name: Run ${{ matrix.bot }} bot tests
      run: |
        make test-${{ matrix.bot }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security, performance, bot-specific-tests]
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security, performance, bot-specific-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
