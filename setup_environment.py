#!/usr/bin/env python3
"""
Drift Trading Environment Setup Helper
Secure API key configuration and environment management
"""

import os
import sys
import getpass
import json
from pathlib import Path
from datetime import datetime

class EnvironmentSetup:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.env_file = self.project_root / ".env"
        self.wallet_file = self.project_root / ".devnet_wallet.json"

    def print_header(self):
        print("\n🔧 Drift Trading Environment Setup Helper")
        print("=" * 50)

    def check_environment_status(self):
        """Check current environment variable status"""
        print("\n📊 Current Environment Status:")
        print("─" * 40)

        api_key_set = bool(os.getenv("DRIFT_API_KEY"))
        if api_key_set:
            print("✅ DRIFT_API_KEY: Set (hidden for security)")
        else:
            print("❌ DRIFT_API_KEY: Not set")

        cluster = os.getenv("DRIFT_CLUSTER", "")
        if cluster:
            print(f"✅ DRIFT_CLUSTER: {cluster}")
        else:
            print("❌ DRIFT_CLUSTER: Not set")

        if self.wallet_file.exists():
            print(f"✅ Wallet file: Found ({self.wallet_file.name})")
        else:
            print("❌ Wallet file: Not found")

        if self.env_file.exists():
            print("✅ Environment file: Found (.env)")
        else:
            print("❌ Environment file: Not found")

    def set_api_key_interactive(self):
        """Securely set API key via user input"""
        print("\n🔐 Setting API Key (Secure Input)")
        print("─" * 40)
        print("💡 Your API key will not be displayed as you type")
        print("💡 Get your Helius API key from: https://helius.dev")
        print()

        try:
            api_key = getpass.getpass("Enter your Helius API Key: ").strip()

            if not api_key:
                print("❌ No API key entered.")
                return False

            # Basic validation
            if not all(c.isalnum() or c in "-_" for c in api_key):
                print("❌ API key contains invalid characters.")
                return False

            os.environ["DRIFT_API_KEY"] = api_key
            print(f"✅ API key set successfully (length: {len(api_key)} characters)")
            print("💡 Note: This is only set for the current session")
            return True

        except KeyboardInterrupt:
            print("\n❌ Operation cancelled.")
            return False

    def set_api_key_from_file(self):
        """Load API key from file"""
        print("\n📁 Setting API Key from File")
        print("─" * 40)

        file_path = input("Enter path to API key file: ").strip()

        if not Path(file_path).exists():
            print(f"❌ File not found: {file_path}")
            return False

        try:
            with open(file_path, 'r') as f:
                api_key = f.read().strip()

            if not api_key:
                print("❌ API key file is empty")
                return False

            os.environ["DRIFT_API_KEY"] = api_key
            print("✅ API key loaded from file successfully")
            return True

        except Exception as e:
            print(f"❌ Error reading file: {e}")
            return False

    def generate_env_file(self):
        """Generate .env file with current configuration"""
        print("\n📄 Generating Environment File")
        print("─" * 40)

        api_key = os.getenv("DRIFT_API_KEY")
        if not api_key:
            print("❌ Please set your API key first")
            return False

        env_config = {
            "DRIFT_API_KEY": api_key,
            "DRIFT_CLUSTER": "devnet",
            "DRIFT_KEYPAIR_PATH": ".devnet_wallet.json",
            "USE_MOCK": "false",
            "SWIFT_BASE": "https://swift.drift.trade"
        }

        try:
            with open(self.env_file, 'w') as f:
                f.write("# Drift Trading Environment Configuration\n")
                f.write(f"# Generated by setup_environment.py on {datetime.now()}\n")
                f.write("\n")
                f.write("# Helius API Key (get from https://helius.dev)\n")
                f.write(f"DRIFT_API_KEY={api_key}\n")
                f.write("\n")
                f.write("# Drift Configuration\n")
                f.write(f"DRIFT_CLUSTER={env_config['DRIFT_CLUSTER']}\n")
                f.write(f"DRIFT_KEYPAIR_PATH={env_config['DRIFT_KEYPAIR_PATH']}\n")
                f.write(f"USE_MOCK={env_config['USE_MOCK']}\n")
                f.write("\n")
                f.write("# Swift Configuration\n")
                f.write(f"SWIFT_BASE={env_config['SWIFT_BASE']}\n")

            print("✅ Environment file (.env) created successfully!")
            print("\n💡 To use this file, you can:")
            print("   • Load it manually: python setup_environment.py --load-env")
            print("   • Or integrate it into your startup scripts")

            return True

        except Exception as e:
            print(f"❌ Error creating environment file: {e}")
            return False

    def load_env_file(self):
        """Load environment variables from .env file"""
        if not self.env_file.exists():
            print("❌ Environment file (.env) not found")
            return False

        try:
            with open(self.env_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        if '=' in line:
                            key, value = line.split('=', 1)
                            os.environ[key.strip()] = value.strip()

            print("✅ Environment variables loaded from .env file")
            return True

        except Exception as e:
            print(f"❌ Error loading environment file: {e}")
            return False

    def show_configuration(self):
        """Display current configuration"""
        print("\n📊 Current Configuration")
        print("─" * 40)

        print("🔑 API Key Status:")
        api_key = os.getenv("DRIFT_API_KEY")
        if api_key:
            print(f"   ✅ Set (length: {len(api_key)} characters)")
        else:
            print("   ❌ Not set")

        print("\n🌍 Environment Variables:")
        env_vars = ["DRIFT_CLUSTER", "DRIFT_KEYPAIR_PATH", "USE_MOCK", "SWIFT_BASE"]
        for var in env_vars:
            value = os.getenv(var, "")
            print(f"   {var}: {value}")

        print("\n📁 File Status:")
        files = [
            (self.wallet_file, "Wallet file"),
            (self.env_file, "Environment file"),
            (self.project_root / "requirements.txt", "Requirements file")
        ]

        for file_path, description in files:
            if file_path.exists():
                size = file_path.stat().st_size
                print(f"   ✅ {description}: Found ({file_path.name}, {size} bytes)")
            else:
                print(f"   ❌ {description}: Not found")

    def test_setup(self):
        """Run comprehensive environment tests"""
        print("\n🧪 Testing Environment Setup")
        print("─" * 40)

        tests_passed = 0
        total_tests = 0

        # Test 1: API Key
        total_tests += 1
        if os.getenv("DRIFT_API_KEY"):
            print("✅ Test 1 PASSED: DRIFT_API_KEY is set")
            tests_passed += 1
        else:
            print("❌ Test 1 FAILED: DRIFT_API_KEY not set")

        # Test 2: Python version
        total_tests += 1
        if sys.version_info >= (3, 8):
            print(f"✅ Test 2 PASSED: Python {sys.version.split()[0]} is available")
            tests_passed += 1
        else:
            print(f"❌ Test 2 FAILED: Python 3.8+ required, found {sys.version.split()[0]}")

        # Test 3: Required packages
        total_tests += 1
        try:
            import driftpy
            print("✅ Test 3 PASSED: driftpy is available")
            tests_passed += 1
        except ImportError:
            print("❌ Test 3 FAILED: driftpy not installed")

        # Test 4: Wallet file
        total_tests += 1
        if self.wallet_file.exists():
            print("✅ Test 4 PASSED: Wallet file exists")
            tests_passed += 1
        else:
            print("❌ Test 4 FAILED: Wallet file not found")

        # Test 5: Project structure
        total_tests += 1
        required_files = ["setup_devnet_trading.bat", "requirements.txt"]
        missing_files = [f for f in required_files if not (self.project_root / f).exists()]

        if not missing_files:
            print("✅ Test 5 PASSED: Project structure is complete")
            tests_passed += 1
        else:
            print(f"❌ Test 5 FAILED: Missing files: {', '.join(missing_files)}")

        print(f"\n📊 Test Results: {tests_passed}/{total_tests} tests passed")

        if tests_passed == total_tests:
            print("🎉 All tests passed! You're ready to run setup_devnet_trading.bat")
        else:
            print("⚠️  Some tests failed. Please address the issues above.")

    def main_menu(self):
        """Main interactive menu"""
        while True:
            print("\n🎯 What would you like to do?")
            print("─" * 40)
            print("1. Set API Key (secure input)")
            print("2. Set API Key from file")
            print("3. Generate environment file")
            print("4. Load environment from file")
            print("5. Show current configuration")
            print("6. Test environment setup")
            print("7. Exit")
            print()

            try:
                choice = input("Enter your choice (1-7): ").strip()

                if choice == "1":
                    self.set_api_key_interactive()
                elif choice == "2":
                    self.set_api_key_from_file()
                elif choice == "3":
                    self.generate_env_file()
                elif choice == "4":
                    self.load_env_file()
                elif choice == "5":
                    self.show_configuration()
                elif choice == "6":
                    self.test_setup()
                elif choice == "7":
                    print("\n👋 Goodbye! Your environment is ready.")
                    print("💡 Remember to run setup_devnet_trading.bat when you're ready to trade")
                    break
                else:
                    print("❌ Invalid choice. Please enter 1-7.")

            except KeyboardInterrupt:
                print("\n\n👋 Goodbye!")
                break
            except Exception as e:
                print(f"❌ Error: {e}")

def main():
    setup = EnvironmentSetup()
    setup.print_header()
    setup.check_environment_status()

    # Handle command line arguments
    if len(sys.argv) > 1:
        if sys.argv[1] == "--load-env":
            setup.load_env_file()
        elif sys.argv[1] == "--test":
            setup.test_setup()
        elif sys.argv[1] == "--help":
            print("Usage: python setup_environment.py [options]")
            print("Options:")
            print("  --load-env    Load environment variables from .env file")
            print("  --test        Run environment tests")
            print("  --help        Show this help message")
            print("  (no args)     Interactive mode")
        else:
            print(f"Unknown option: {sys.argv[1]}")
            print("Use --help for usage information")
    else:
        setup.main_menu()

if __name__ == "__main__":
    main()

